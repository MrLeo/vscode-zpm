{
  "eslint-disable": {
    "prefix": "eslint",
    "body": ["/* eslint-disable */"],
    "description": "禁用eslint"
  },
  "eslint-enable": {
    "prefix": "eslint",
    "body": ["/* eslint-enable */"],
    "description": "启用eslint"
  },
  "eslint-disable-line": {
    "prefix": "eslint",
    "body": ["// eslint-disable-line"],
    "description": "eslint忽略当前行"
  },
  "eslint-disable-next-line": {
    "prefix": "eslint",
    "body": ["// eslint-disable-next-line"],
    "description": "eslint忽略下一行"
  },
  "zpfe.init": {
    "prefix": "zpfe.init",
    "body": [
      "/*",
      " * @Description: $1",
      " */",
      "",
      "import qs from 'qs'",
      "import ZPError from '../../util/error'",
      "import { initHandler, errorHandler, throwIfMiss } from '../../util/'",
      "import request from '../../util/request'",
      "",
      "async function POST (ctx) {",
      "  try {",
      "    const init = await initHandler(ctx, { checkAT: true })",
      "    let params = {",
      "      loginUserId: init.loginUserId",
      "    }",
      "",
      "    let { data: res } = await request(ctx).post(`$2?${qs.stringify(params)}`)",
      "",
      "    ctx.response.body = res",
      "    // ctx.response.set({ code: 200, data: res, message: res.message || '成功', taskId: res.taskId || ctx.request.headers.get('x-zp-request-id') })",
      "  } catch (err) {",
      "    errorHandler(ctx, err)",
      "  }",
      "}",
      "",
      "async function GET (ctx) {",
      "  try {",
      "    const init = await initHandler(ctx, { checkAT: true })",
      "    let params = {",
      "      loginUserId: init.loginUserId",
      "    }",
      "",
      "    let { data: res } = await request(ctx).get(`$2`, { params })",
      "",
      "    ctx.response.body = res",
      "    // ctx.response.set({ code: 200, data: res, message: res.message || '成功', taskId: res.taskId || ctx.request.headers.get('x-zp-request-id') })",
      "  } catch (err) {",
      "    errorHandler(ctx, err)",
      "  }",
      "}",
      "",
      "export default { GET, POST }"
    ],
    "description": "zpfe api init"
  },
  "ctx.log.info": {
    "prefix": "cli",
    "body": ["ctx.log.info(`[standout] $1 -> `, JSON.stringify($2))$3"],
    "description": "ctx log info output"
  },
  "ctx.log.error": {
    "prefix": "cle",
    "body": ["ctx.log.error(`[standout] error -> $1`, simplify(err))$2"],
    "description": "ctx log error output"
  },
  "ZPError": {
    "prefix": ["zpthrow"],
    "body": [
      "throw new ZPError({ code: ${1:res.code || 500}, message: ${2:res.message || '出错了'}, taskId: ${3:res.taskId || ctx.request.headers.get('x-zp-request-id') ||''} })"
    ],
    "description": "使用ZPError抛出异常"
  },
  "Print to console": {
    "prefix": "cl",
    "body": ["console.log(`[$1]$2 -> $3`,$4)$5"],
    "description": "Log output to console"
  },
  "Print to console with color": {
    "prefix": "cl",
    "body": ["console.log(`%c[$1]$2 -> $3`,'color:#1B8BFF;',$4)$5"],
    "description": "Log output to console with color"
  },
  "Print to console with group": {
    "prefix": "cg",
    "body": [
      "console.groupCollapsed(`------------------> $1 <------------------`)",
      "console.log(`[$2]$3 -> $4`,$5)$6",
      "console.groupEnd()"
    ],
    "description": "Log output to console with group"
  },
  "stopBubble": {
    "prefix": "stop",
    "body": [
      "function stopBubble(e) { ",
      "  if ( e && e.stopPropagation ) e.stopPropagation(); ",
      "  else window.event.cancelBubble = true; ",
      "  $0",
      "}"
    ],
    "description": "阻止冒泡"
  },
  "stopDefault": {
    "prefix": "stop",
    "body": [
      "function stopDefault( e ) { ",
      "  if ( e && e.preventDefault ) e.preventDefault(); ",
      "  else window.event.returnValue = false; ",
      "  $0",
      "  return false; ",
      "}"
    ],
    "description": "阻止浏览器默认行为"
  }
}
